from evmdasm import EvmInstructions, EvmProgram, registry, Instruction, utils
p = EvmProgram()
#default
p.push("80")
p.push("40")
p.op("MSTORE")

#check callvalue
p.op("CALLVALUE")
p.op("DUP1")
p.op("ISZERO")
p.op("JUMPI", flag=1)
p.push("00")
p.op("DUP1")
p.op("REVERT")

p.op("JUMPDEST", flag=1)
p.op("POP")

#calldatacopy(0, 0, calldatasize())
p.op("CALLDATASIZE")
p.push("00")
p.op("DUP1")
p.op("CALLDATACOPY")

#let result := delegatecall(gas(), ERC20, 0, calldatasize(), 0, 0)
p.push("00")
p.op("DUP1")
p.op("CALLDATASIZE")
p.push("00")
#ERC20 地址 待定
p.push("0x892a2b7cF919760e148A0d33C1eb0f44D3b383f8")
p.op("GAS")
p.op("DELEGATECALL")

#returndatacopy(0, 0, returndatasize())
p.op("RETURNDATASIZE")
p.push("00")
p.op("DUP1")
p.op("RETURNDATACOPY")
p.op("DUP1")
p.op("DUP1")
p.op("ISZERO")
p.op("JUMPI", flag=2)

p.op("RETURNDATASIZE")
p.push("00")
p.op("RETURN")

p.op("JUMPDEST", flag=2)
p.op("RETURNDATASIZE")
p.push("00")
p.op("REVERT")
#check return value

jumps = [j for j in p._program if j.name in ("JUMP","JUMPI")]
for jump in jumps:
        jmpdest = [j for j in p._program if j.name == "JUMPDEST" and j.flag == jump.flag][0]
        print(jmpdest.address)
        item = p.create_push_for_data(jmpdest.address)
        p._program.insert(p._program.index(jump), item)  # insert fixes addresses
        p._program._update_instruction_addresses()
        jmpdest = [j for j in p._program if j.name == "JUMPDEST" and j.flag == jump.flag][0]

        item.operand_bytes = utils.int2bytes(jmpdest.address)
print(jumps)
# p.push()

print(p._program)

print(p.assemble().as_hexstring)

prefix = "60806040523480156200001157600080fd5b506040516200037538038062000375833981016040819052620000349162000123565b818160036200004483826200021c565b5060046200005382826200021c565b5050505050620002e8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008657600080fd5b81516001600160401b0380821115620000a357620000a36200005e565b604051601f8301601f19908116603f01168101908282118183101715620000ce57620000ce6200005e565b81604052838152602092508683858801011115620000eb57600080fd5b600091505b838210156200010f5785820183015181830184015290820190620000f0565b600093810190920192909252949350505050565b600080604083850312156200013757600080fd5b82516001600160401b03808211156200014f57600080fd5b6200015d8683870162000074565b935060208501519150808211156200017457600080fd5b50620001838582860162000074565b9150509250929050565b600181811c90821680620001a257607f821691505b602082108103620001c357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021757600081815260208120601f850160051c81016020861015620001f25750805b601f850160051c820191505b818110156200021357828155600101620001fe565b5050505b505050565b81516001600160401b038111156200023857620002386200005e565b62000250816200024984546200018d565b84620001c9565b602080601f8311600181146200028857600084156200026f5750858301515b600019600386901b1c1916600185901b17855562000213565b600085815260208120601f198616915b82811015620002b95788860151825594840194600190910190840162000298565b5085821015620002d85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61004780620002f86000396000f3fe"
subfix = "fea2646970667358221220501bb8f6a52a60f51b316c77cc16d28eabbd6a4ac23658a5ea22633a63d2774964736f6c63430008110033"

file = open("./evm-runner/ERC20Custom.txt", "w")
file.write(prefix + p.assemble().as_hexstring + subfix)
file.close()